import React, { useState } from 'react';

const totalPages = 10;
const pageColors: Record<number, string> = {
  1: 'bg-blue-500',
  2: 'bg-green-500',
  3: 'bg-yellow-500',
  4: 'bg-purple-500',
  5: 'bg-red-500',
  6: 'bg-pink-500',
  7: 'bg-teal-500',
  8: 'bg-orange-500',
  9: 'bg-indigo-500',
  10: 'bg-lime-500',
};

const App: React.FC = () => {
  const [currentPage, setCurrentPage] = useState<number>(1);

  const updateBackgroundColor = (page: number): string => {
    return pageColors[page] || 'bg-gray-500';
  };

  const handlePrev = (): void =>
    setCurrentPage((prev) => (prev - 1 < 1 ? totalPages : prev - 1));
  const handleNext = (): void =>
    setCurrentPage((prev) => (prev + 1 > totalPages ? 1 : prev + 1));
  const handlePageClick = (page: number): void => setCurrentPage(page);

  const renderPageButtons = () => {
    const buttons = [];

    if (currentPage <= 4) {
      // Case 1: Display first 4 pages and last page
      for (let i = 1; i <= 5; i++) {
        buttons.push(
          <button
            key={i}
            className={`px-3 py-1 rounded ${
              i === currentPage
                ? 'bg-gray-800 text-white'
                : 'bg-gray-300 text-black hover:bg-gray-400'
            }`}
            onClick={() => handlePageClick(i)}
          >
            {i}
          </button>
        );
      }
      buttons.push(
        <span key='ellipsis' className='px-3 py-1'>
          ...
        </span>
      );
      buttons.push(
        <button
          key={totalPages}
          className={`px-3 py-1 rounded ${
            totalPages === currentPage
              ? 'bg-gray-800 text-white'
              : 'bg-gray-300 text-black hover:bg-gray-400'
          }`}
          onClick={() => handlePageClick(totalPages)}
        >
          {totalPages}
        </button>
      );
    } else if (currentPage >= totalPages - 3) {
      // Case 2: Display first page and last 4 pages
      buttons.push(
        <button
          key={1}
          className={`px-3 py-1 rounded ${
            currentPage === 1
              ? 'bg-gray-800 text-white'
              : 'bg-gray-300 text-black hover:bg-gray-400'
          }`}
          onClick={() => handlePageClick(1)}
        >
          1
        </button>
      );
      buttons.push(
        <span key='ellipsis' className='px-3 py-1'>
          ...
        </span>
      );
      for (let i = totalPages - 4; i <= totalPages; i++) {
        buttons.push(
          <button
            key={i}
            className={`px-3 py-1 rounded ${
              i === currentPage
                ? 'bg-gray-800 text-white'
                : 'bg-gray-300 text-black hover:bg-gray-400'
            }`}
            onClick={() => handlePageClick(i)}
          >
            {i}
          </button>
        );
      }
    } else {
      // Case 3: Display first page, 2 pages around current, and last page
      buttons.push(
        <button
          key={1}
          className={`px-3 py-1 rounded ${
            currentPage === 1
              ? 'bg-gray-800 text-white'
              : 'bg-gray-300 text-black hover:bg-gray-400'
          }`}
          onClick={() => handlePageClick(1)}
        >
          1
        </button>
      );
      buttons.push(
        <span key='ellipsis1' className='px-3 py-1'>
          ...
        </span>
      );
      for (let i = currentPage - 1; i <= currentPage + 1; i++) {
        buttons.push(
          <button
            key={i}
            className={`px-3 py-1 rounded ${
              i === currentPage
                ? 'bg-gray-800 text-white'
                : 'bg-gray-300 text-black hover:bg-gray-400'
            }`}
            onClick={() => handlePageClick(i)}
          >
            {i}
          </button>
        );
      }
      buttons.push(
        <span key='ellipsis2' className='px-3 py-1'>
          ...
        </span>
      );
      buttons.push(
        <button
          key={totalPages}
          className={`px-3 py-1 rounded ${
            totalPages === currentPage
              ? 'bg-gray-800 text-white'
              : 'bg-gray-300 text-black hover:bg-gray-400'
          }`}
          onClick={() => handlePageClick(totalPages)}
        >
          {totalPages}
        </button>
      );
    }

    return buttons;
  };

  return (
    <div
      className={`w-full h-screen ${updateBackgroundColor(
        currentPage
      )} flex flex-col justify-between`}
    >
      <div className='flex justify-center items-center text-white text-6xl h-full'>
        {currentPage}
      </div>
      <div className='controls flex justify-center gap-2 pb-5'>
        <button
          className='px-4 py-2 bg-gray-800 text-white rounded hover:bg-gray-600'
          onClick={handlePrev}
        >
          Prev
        </button>
        {renderPageButtons()}
        <button
          className='px-4 py-2 bg-gray-800 text-white rounded hover:bg-gray-600'
          onClick={handleNext}
        >
          Next
        </button>
      </div>
    </div>
  );
};

export default App;
